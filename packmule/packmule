#! /usr/bin/perl

# ###############################################
#
# mule: make unattended loading environment
#
# Austin Shafer - 2018
#     ashaferian@gmail.com
#
# ###############################################

# This program is designed to fill an freebsd installation image 
# with any packages supplied by the user. This results in an image
# which holds extra utilities installed by the user.

# The script mounts the .iso image under /mnt/bsd_iso and copies
# the file system to /tmp/bsd_iso_work. Packages and software is
# added to under /tmp/bsd_iso_work and written to a new .iso image

use YAML;
use Data:Dumper;

# global variables
$mntdir = "/mnt/bsd_iso";
$workdir = "/tmp/bsd_iso_work";
$pkgroot = "/tmp/bsd_iso_pkgs";
$distdir = "$workroot/usr/freebsd-dist";
$md_dev = 4;

$pkg = "pkg -r $pkgroot";

# non interactive pkg
`export ASSUME_ALWAYS_YES=yes`

# ################################################
# Function declarations
# ################################################

# prints out the command and runs it
sub cmd {
    print "@_\n";
    `@_`;
}

# mounts isoname at mntdir
sub mount_img () {
    print "Mounting $isoname at $mntdir\n";
    # NOTE:
    #       md node should be /dev/md${MD_DEV} for default
    # create vnode to mount under
    `mdconfig -a -t vnode -f $isoname -u $md_dev`;
    `mount -t cd9660 /dev/md$md_dev $mntdir`;
}

# ################################################
# unmounts ISONAME at MNTDIR
sub unmount_img() {
    print "Unmounting $isoname from $mntdir\n";

    `umount $mntdir`;
    # delete vnode (default is /dev/md${MD_DEV})
    `mdconfig -d -u $md_dev`;
}

# ################################################
# writes WORKROOT to a new .iso file
sub write_new_img() {

    # change name from FreeBSD___.iso to FreeBSD___-packed.iso
    $newisoname = $isoname;
    # remove segments of form /*/ and .iso
    $newisoname =~ s/(\/.*\/|\.iso)//g;
    $newisoname = "$newisoname-packed.iso";

    print "Writing new install package ./$newisoname\n";

    if ($newisoname =~ /-{3}(.*)-/) {
	$target = $1;
    }
    
    # 
    if ($newisoname =~ /-(.*)-.*/) {
	$volume_label = $1;
	# change all dots and slashes to underscores
	$volume_label =~ s/(\.|-)/_/g;
    }

    print "VOLUME_LABEL = $volume_label\n";

    # run machine dependent script to build install .iso
    `sh /usr/src/release/$target/mkisoimages.sh -b $volume_label \
    $newisoname $workroot`;
}

# ################################################
# removes directory listings
sub remove_dirs() {
    `rm -rf $workroot`;
    `rm -rf $pkgroot`;
}

# ################################################ 
# BEGIN MAIN
# ################################################ 

# the packing list config file
$plist = "packmule.yaml";
# the name of the image to generate
$isoname = "null";

# process command line arguments
while (@ARGV != 0) {
    my $arg = shift;

    if (arg eq "-y") {
	$plist = shift; 
    } else if ($isoname eq "null") {
	$isoname = $arg;
    } else {
	print "Skipping unrecognized argument $arg\n";
    }
}

# isoname must be set
if ($isoname eq "null") {
    print "Usage: packmule [-y /path/to/config.yaml] isoname\n";
    print "       (Default config is ./packmule.yaml)\n";
    exit(1);
}

my $config = LoadFile($plist);

# DEBUG
print Dumper($config), "\n";

exit;

# create directories if needed
remove_dirs
mkdir -p ${MNTDIR}
mkdir -p ${WORKROOT}
mkdir -p ${PKGROOT}

# mount the .iso
mount_img;

# copy image to r/w direcotry $workroot
print "--------------------------------------------------";
print "Copying filesystem from $mntdir to $workroot...";
print "--------------------------------------------------";
`cp -R $mntdir/* $workroot/`;

# use pkg to fill new image tree
print "--------------------------------------------------";
print "Installing packages in $workroot...";
print "--------------------------------------------------";

# configure installation
install_config;

# install packages in directory to tar
my $packages = `cat $plist`;

for my $p ($packages) {
    cmd $pkg install $p;
}

# pack up the custom stuff as a distribution tar
print "--------------------------------------------------\n";
print "Creating distribution file $distdir/custom-pkgs.txz...\n";
print "--------------------------------------------------\n";

`cd $pkgroot`;
`tar -cvJpf $distdir/custom-pkgs.txz ./`;
`cd -`;

# pretty self explanatory by the function name
print "--------------------------------------------------\n";
write_new_img;
print "--------------------------------------------------\n";

# unmount and free vnode
print "--------------------------------------------------\n";
print "Deleting $workroot...\n";
print "--------------------------------------------------\n";
remove_dirs;
unmount_img;
